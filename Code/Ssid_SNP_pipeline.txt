Calling SNPs in S. siderea RT work#trim all fastq filesfor F in *.fastq; doecho "tagseq_clipper.pl $F | cutadapt - -a AAAAAAAA -a AGATCGG -q 15 -m 25 -o ${F/.fq/}.trim" >>clean;doneNano cleanPaste this#!/bin/bash -l#$ -V # inherit the submission environment#$ -cwd # start job in submission directory#$ -N trim # job name, anything you want#$ -l h_rt=24:00:00#$ -M daviessw@gmail.com#$ -m bemodule load cutadaptqsub clean#prep transcriptome for mappingmodule load bowtie2bowtie2-build davies_Ssid.fasta davies_Ssid.fastabowtie2-build davies_cladeC_feb.fasta davies_cladeC_feb.fasta#Now re-map all .trim files2bRAD_bowtie2_launch.pl '\.trim$' davies_Ssid.fasta >bowtie2_forsnp2bRAD_bowtie2_launch.pl '\.trim$' davies_cladeC_feb.fasta >bowtie2_forsnp/projectnb/coral/MPCC_2018/scc6_qsub_launcher.py -N mapping -P coral -M daviessw@gmail.com -j y -h_rt 24:00:00 -jobsfile bowtie2_forsnpmodule load bowtie2qsub mapping_array.qsub#example line in script:bowtie2 --no-unal --score-min L,16,1 --local -L 16 -x davies_Ssid.fasta -U P1_a.fastq.trim -S P1_a.fastq.trim.bt2.sambowtie2 --no-unal --score-min L,16,1 --local -L 16 -x davies_cladeC_feb.fasta -U Ssid959.fastq.trim -S Ssid959.fastq.trim.bt2.sam#breakdown =#--no-unal = suppress SAM records for unaligned reads#--score-min L,16,1 [L = linear --> f(x) = 16 + 1 * x]#--local -L 16 = Sets the length of the seed substrings to align during multiseed alignment. #Smaller values make alignment slower but more sensitive#this is different from the tagseq mapping script in a few ways. the tagseq method includes these unique flags:--no-hd = suppress SAM header lines (starting with @)--no-sq  = suppress @SQ SAM header lines-k = indicates -k mode. In this mode, bowtie searches for up to N distinct, valid alignments for each read. We have -k 5, meaning bowtie will search for at most 5 distinct alignments. The manual says that the -k mode is effective in situations where you care more about whether a read aligns, or aligns a certain number of times, rather than where exactly it originated##now we have .sam files#now try making bam files:ls *bt2.sam > samscat sams | wc -lcat sams | perl -pe 's/(\S+)\.sam/samtools import davies_Ssid.fasta $1\.sam $1\.unsorted\.bam && samtools sort -o $1\.sorted\.bam $1\.unsorted\.bam && picard AddOrReplaceReadGroups INPUT=$1\.sorted\.bam OUTPUT=$1\.bam RGID=group1 RGLB=lib1 RGPL=illumina RGPU=unit1 RGSM=$1 && samtools index $1\.bam/' >s2bcat sams | perl -pe 's/(\S+)\.sam/samtools import davies_cladeC_feb.fasta $1\.sam $1\.unsorted\.bam && samtools sort -o $1\.sorted\.bam $1\.unsorted\.bam && picard AddOrReplaceReadGroups INPUT=$1\.sorted\.bam OUTPUT=$1\.bam RGID=group1 RGLB=lib1 RGPL=illumina RGPU=unit1 RGSM=$1 && samtools index $1\.bam/' >s2b#Example command for one file:samtools import davies_Ssid.fasta P1_a.trim.bt2.sam P1_a.fastq.trim.bt2.unsorted.bam && samtools sort -o P1_a.fastq.trim.bt2.sorted.bam P1_a.fastq.trim.bt2.unsorted.bam && picard AddOrReplaceReadGroups INPUT=P1_a.fastq.trim.bt2.sorted.bam OUTPUT=P1_a.fastq.trim.bt2.bam RGID=group1 RGLB=lib1 RGPL=illumina RGPU=unit1 RGSM=P1_a.fastq.trim.bt2 && samtools index P1_a.fastq.trim.bt2.bamsamtools import davies_cladeC_feb.fasta Ssid284.fastq.trim.bt2.sam Ssid284.fastq.trim.bt2.unsorted.bam && samtools sort -o Ssid284.fastq.trim.bt2.sorted.bam Ssid284.fastq.trim.bt2.unsorted.bam && picard AddOrReplaceReadGroups INPUT=Ssid284.fastq.trim.bt2.sorted.bam OUTPUT=Ssid284.fastq.trim.bt2.bam RGID=group1 RGLB=lib1 RGPL=illumina RGPU=unit1 RGSM=Ssid284.fastq.trim.bt2 && samtools index Ssid284.fastq.trim.bt2.bam/projectnb/coral/MPCC_2018/scc6_qsub_launcher.py -N sam2bam -P coral -M daviessw@gmail.com -j y -h_rt 24:00:00 -jobsfile s2b##note these module loads need to be within the qsub scriptmodule load htslib/1.9module load samtools/1.9module load picard#once job finishes, remove unnecessary intermediate filesrm -f *sorted*ls *bt2.bam > bamscat bams | wc -l#58### angsd genotyping - initial quality checkmodule load samtoolsmodule load picard#first need to create a dictionary and an index (.fai) file for the reference transcriptomespicard CreateSequenceDictionary R= davies_cladeC_feb.fasta O= davies_cladeC_feb.dictsamtools faidx davies_cladeC_feb.fasta#--------------- population structure (based on common polymorphisms)# F I L T E R S :# (ALWAYS record your filter settings and explore different combinations to confirm that results are robust. )# Suggested filters :# -minMapQ 20 : only highly unique mappings (prob of erroneous mapping = 1%)# -minQ 25 : only highly confident base calls#could make this 20 to get more snps# -minInd 35 : the site must be genotyped in at least 35 individuals (note: set this to ~ 80% of your total number of your individuals) 0.8*44 =35.2#lower this if you want more snps# -minIndDepth 5 : depth of at least 6 in non-missing individual#change to 5, no lower than 5 though# -snp_pval 1e-5 : high confidence that the SNP is not just sequencing error # -minMaf 0.05 : only common SNPs, with allele frequency 0.05 or more.# Note: the last two filters are very efficient against sequencing errors but introduce bias against true rare alleles. It is OK (and even desirable) - UNLESS we want to do AFS analysis. We will generate data for AFS analysis in the next part.\# also adding  filters against very badly non-HWE sites (such as, all calls are heterozygotes => lumped paralog situation) and sites with really bad strand bias:\# T O   D O : \# -GL 1 : samtools likelihood model\# -doGlf 2 : output beagle format (for admixture)\# -doGeno 8 : binary genotype likelihoods format (for ngsCovar => PCA)\44# -doMajorMinor 4 -ref $GENOME_REF : infer major and minor alleles from reference (in our case it is outgroup taxon)\# -makeMatrix 1 -doIBS 1 -doCov 1 : identity-by-state and covariance matrices based on single-read resampling (robust to variation in coverage across samples)\# TO-DO commands can be changed to generate different files needed for different analyses as well (http://www.popgen.dk/angsd/index.php/ANGSD#Overview) #skipTrialellic 1 #could add this if you want to remove triallelic snps, usually a sequencing error#Request an interactive node before you start this analysis, might get kicked off for taking up too much memory on the head node#qrsh -pe omp 12###filtersFILTERS="-uniqueOnly 1 -remove_bads 1 -minMapQ 20 -minQ 25 -minInd 35 -geno_minDepth 5 -dosnpstat 1 -doHWE 1 -sb_pval 1e-5 -hetbias_pval 1e-5 -skipTriallelic 1 -snp_pval 1e-5 -minMaf 0.05"TODO="-doMajorMinor 1 -doMaf 1 -doCounts 1 -makeMatrix 1 -doIBS 1 -seed 10 -doCov 1 -doGeno 8 -doBcf 1 -doPost 1 -doGlf 2"module load angsdangsd -b bams -GL 1 $FILTERS $TODO -P 1 -out ssidOutput filenames:		->"ssid.arg"		->"ssid.beagle.gz"		->"ssid.mafs.gz"		->"ssid.hwe.gz"		->"ssid.geno.gz"		->"ssid.snpStat.gz"		->"ssid.ibs.gz"		->"ssid.ibsMat"		->"ssid.covMat"		->"ssid.bcf"# ADMIXTURE\module load admixtureNSITES=`zcat ssid.beagle.gz | wc -l`echo $NSITES#4797 host NGSadmix -likes ssid.beagle.gz -K 2 -P 10 -o admix2NGSadmix -likes ssid.beagle.gz -K 3 -P 10 -o admix3NGSadmix -likes ssid.beagle.gz -K 4 -P 10 -o admix4NGSadmix -likes ssid.beagle.gz -K 5 -P 10 -o admix5NGSadmix -likes ssid.beagle.gz -K 6 -P 10 -o admix6module load plink/1.90b6.4module load admixtureplink --bcf ssid.bcf --make-bed --allow-extra-chr 0 --out donefor K in `seq 1 5`; \do admixture --cv done.bed $K | tee done_${K}.out; donegrep -h CV done_*.outCV error (K=1): 0.49635CV error (K=2): 0.54953CV error (K=3): 0.60788CV error (K=4): 0.65861CV error (K=5): 0.71782#lowest error was K=1#no structure in these host populations# scp *Mat, *qopt and bams files to laptop to look at hclust, PCA etc###################################################################################now we need to remove host outliers are: 464, 470, 471, 472#make new file called bams_remove with outliers removed#Request an interactive node before you start this analysis, might get kicked off for taking up too much memory on the head nodeqrsh -pe omp 12###filters only change here is -minInd changes to 32 here because 0.8*40 = 32 (because removed 4 individuals)FILTERS="-uniqueOnly 1 -remove_bads 1 -minMapQ 20 -minQ 25 -minInd 32 -geno_minDepth 5 -dosnpstat 1 -doHWE 1 -sb_pval 1e-5 -hetbias_pval 1e-5 -skipTriallelic 1 -snp_pval 1e-5 -minMaf 0.05"TODO="-doMajorMinor 1 -doMaf 1 -doCounts 1 -makeMatrix 1 -doIBS 1 -seed 10 -doCov 1 -doGeno 8 -doBcf 1 -doPost 1 -doGlf 2"module load angsdangsd -b bams_remove -GL 1 $FILTERS $TODO -P 1 -out ssid_removeOutput filenames:		->"ssid_remove.arg"		->"ssid_remove.beagle.gz"		->"ssid_remove.mafs.gz"		->"ssid_remove.hwe.gz"		->"ssid_remove.geno.gz"		->"ssid_remove.snpStat.gz"		->"ssid_remove.ibs.gz"		->"ssid_remove.ibsMat"		->"ssid_remove.covMat"		->"ssid_remove.bcf"# ADMIXTURE\module load admixtureNSITES=`zcat ssid_remove.beagle.gz | wc -l`echo $NSITES#4511 host NGSadmix -likes ssid_remove.beagle.gz -K 2 -P 10 -o admix_remove_2NGSadmix -likes ssid_remove.beagle.gz -K 3 -P 10 -o admix_remove_3NGSadmix -likes ssid_remove.beagle.gz -K 4 -P 10 -o admix_remove_4NGSadmix -likes ssid_remove.beagle.gz -K 5 -P 10 -o admix_remove_5NGSadmix -likes ssid_remove.beagle.gz -K 6 -P 10 -o admix_remove_6module load plink/1.90b6.4module load admixtureplink --bcf ssid_remove.bcf --make-bed --allow-extra-chr 0 --out donefor K in `seq 1 5`; \do admixture --cv done.bed $K | tee done_${K}.out; donegrep -h CV done_*.outCV error (K=1): 0.49157CV error (K=2): 0.55969CV error (K=3): 0.64266CV error (K=4): 0.71754CV error (K=5): 0.78038#lowest error was still K=1 after outliers were removed#no structure in these host populations# scp *Mat, *qopt and bams files to laptop to look at hclust, PCA etc##################################################################################now we need to remove one of the two individuals who are behaving as very closely related based on both PCA and hclust#413 and 476 look highly related so remove 413 and run one last time#remove 413#make new file called bams_remove with outliers removed#Request an interactive node before you start this analysis, might get kicked off for taking up too much memory on the head nodeqrsh -pe omp 12###filters -minInd is 31 here because 0.8*39 = 31.2 (because removed 1 additional individual)FILTERS="-uniqueOnly 1 -remove_bads 1 -minMapQ 20 -minQ 25 -minInd 31 -geno_minDepth 5 -dosnpstat 1 -doHWE 1 -sb_pval 1e-5 -hetbias_pval 1e-5 -skipTriallelic 1 -snp_pval 1e-5 -minMaf 0.05"TODO="-doMajorMinor 1 -doMaf 1 -doCounts 1 -makeMatrix 1 -doIBS 1 -seed 10 -doCov 1 -doGeno 8 -doBcf 1 -doPost 1 -doGlf 2"module load angsdangsd -b bams_remove2 -GL 1 $FILTERS $TODO -P 1 -out ssid_remove2Output filenames:		->"ssid_remove2.arg"		->"ssid_remove2.beagle.gz"		->"ssid_remove2.mafs.gz"		->"ssid_remove2.hwe.gz"		->"ssid_remove2.geno.gz"		->"ssid_remove2.snpStat.gz"		->"ssid_remove2.ibs.gz"		->"ssid_remove2.ibsMat"		->"ssid_remove2.covMat"		->"ssid_remove2.bcf"# ADMIXTURE\module load admixtureNSITES=`zcat ssid_remove2.beagle.gz | wc -l`echo $NSITES#4655 host NGSadmix -likes ssid_remove2.beagle.gz -K 2 -P 10 -o admix_remove2_2NGSadmix -likes ssid_remove2.beagle.gz -K 3 -P 10 -o admix_remove2_3NGSadmix -likes ssid_remove2.beagle.gz -K 4 -P 10 -o admix_remove2_4NGSadmix -likes ssid_remove2.beagle.gz -K 5 -P 10 -o admix_remove2_5NGSadmix -likes ssid_remove2.beagle.gz -K 6 -P 10 -o admix_remove2_6module load plink/1.90b6.4module load admixtureplink --bcf ssid_remove2.bcf --make-bed --allow-extra-chr 0 --out donefor K in `seq 1 5`; \do admixture --cv done.bed $K | tee done_${K}.out; donegrep -h CV done_*.outCV error (K=1): 0.48860CV error (K=2): 0.57929CV error (K=3): 0.66541CV error (K=4): 0.76076CV error (K=5): 0.87063#lowest error was still K=1 after potential clone was removed#no structure in these host populations# scp *Mat, *qopt and bams files to laptop to look at hclust, PCA etc#############################################################Now do the symbiont###filters (note did -geno_minDepth 2 here because symbiont data were so sparse)FILTERS="-uniqueOnly 1 -remove_bads 1 -minMapQ 20 -minQ 25 -minInd 35 -geno_minDepth 2 -dosnpstat 1 -doHWE 1 -sb_pval 1e-5 -hetbias_pval 1e-5 -skipTriallelic 1 -snp_pval 1e-5 -minMaf 0.05"TODO="-doMajorMinor 1 -doMaf 1 -doCounts 1 -makeMatrix 1 -doIBS 1 -seed 10 -doCov 1 -doGeno 8 -doBcf 1 -doPost 1 -doGlf 2"module load angsdangsd -b bams -GL 1 $FILTERS $TODO -P 1 -out symOutput filenames:		->"sym.arg"		->"sym.beagle.gz"		->"sym.mafs.gz"		->"sym.hwe.gz"		->"sym.geno.gz"		->"sym.snpStat.gz"		->"sym.ibs.gz"		->"sym.ibsMat"		->"sym.covMat"		->"sym.bcf"# ADMIXTURE\module load admixturemodule load angsdNSITES=`zcat sym.beagle.gz | wc -l`echo $NSITES#405 sym NGSadmix -likes sym.beagle.gz -K 2 -P 10 -o symadmix2NGSadmix -likes sym.beagle.gz -K 3 -P 10 -o symadmix3NGSadmix -likes sym.beagle.gz -K 4 -P 10 -o symadmix4NGSadmix -likes sym.beagle.gz -K 5 -P 10 -o symadmix5NGSadmix -likes sym.beagle.gz -K 6 -P 10 -o symadmix6#could not estimate optimal K for symbiont- too few sites# scp *Mat, *qopt and bams files to laptop, same directory as dd.pdf file above# Next we will use angsd_ibs_pca.R to plot PCA and admixturePlotting_v4.R to plot ADMIXTURE and move to home laptops and work in R for visualizations.